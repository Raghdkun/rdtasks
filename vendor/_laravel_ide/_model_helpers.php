<?php

namespace App\Models {

    /**
     * App\Models\ActivityType
     *
     * @property-read \App\Models\User $createdUser
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\TimeEntry> $timeEntries
     * @property-read int|null $timeEntries_count
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereCreatedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereDeletedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereDeletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType query()
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType clone()
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|ActivityType|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|ActivityType|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<ActivityType>|ActivityType tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class ActivityType extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Client
     *
     * @property-read \App\Models\User $createdUser
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Project> $projects
     * @property-read int|null $projects_count
     * @property-read \App\Models\Department $department
     * @property-read \App\Models\User $user
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Expense> $expenses
     * @property-read int|null $expenses_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Role> $roles
     * @property-read int|null $roles_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Permission> $permissions
     * @property-read int|null $permissions_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\MediaLibrary\MediaCollections\Models\Media> $media
     * @property-read int|null $media_count
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereWebsite($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereCreatedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereDeletedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereDeletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereDepartmentId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client role()
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client permission()
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client query()
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|Client|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|Client|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Client extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\ClientRating
     *
     * @property-read mixed $rating_percentage
     * @property-read mixed $rating_display
     * @property-read \App\Models\Task $task
     * @property-read \App\Models\Client $client
     * @property-read \App\Models\User $ratedBy
     * @property-read \App\Models\User $editedBy
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereTaskId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereClientId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereRatedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereRating($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereComment($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereEditedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereEditedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating query()
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating clone()
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|ClientRating|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|ClientRating|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<ClientRating>|ClientRating tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class ClientRating extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Comment
     *
     * @property-read \App\Models\User $createdUser
     * @property-read \App\Models\Task $task
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereComment($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereTaskId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereCreatedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereDeletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment query()
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|Comment|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|Comment|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Comment>|Comment tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Comment extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\DaysOffSetting
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property int|null $updated_by
     * @property int|null $created_by
     * @property mixed $description
     * @property boolean $is_active
     * @property integer $start_week_day
     * @property integer $days_per_week
     * @property int $id
     * @property-read \App\Models\User $creator
     * @property-read \App\Models\User $updater
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereDaysPerWeek($value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereStartWeekDay($value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereIsActive($value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereDescription($value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereCreatedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereUpdatedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting query()
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting clone()
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|DaysOffSetting|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|DaysOffSetting|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<DaysOffSetting>|DaysOffSetting tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class DaysOffSetting extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Department
     *
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereDescription($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereColor($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereDeletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department query()
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|Department|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|Department|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Department>|Department tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Department extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Event
     *
     * @property-read \App\Models\User $createdBy
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereTitle($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereDescription($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereStartDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereEndDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereAddedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event query()
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|Event|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|Event|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Event extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Expense
     *
     * @property-read \App\Models\User $user
     * @property-read \App\Models\Client $client
     * @property-read \App\Models\Project $project
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\MediaLibrary\MediaCollections\Models\Media> $media
     * @property-read int|null $media_count
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereDescription($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereProjectId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereClientId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereCategory($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereBillable($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereCreatedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereDeletedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereDeletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense query()
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|Expense|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|Expense|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Expense extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Invoice
     *
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Report> $report
     * @property-read int|null $report_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Client> $invoiceClients
     * @property-read int|null $invoiceClients_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Project> $invoiceProjects
     * @property-read int|null $invoiceProjects_count
     * @property-read \App\Models\User $user
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\InvoiceItem> $invoiceItems
     * @property-read int|null $invoiceItems_count
     * @property-read \App\Models\Tax $tax
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Report> $invoiceReport
     * @property-read int|null $invoiceReport_count
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereInvoiceNumber($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereIssueDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereDueDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereTotalHour($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereDiscount($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereTaxId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereSubTotal($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereNotes($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereCreatedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereDeletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereDiscountType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice query()
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|Invoice|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|Invoice|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Invoice>|Invoice tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Invoice extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\InvoiceItem
     *
     * @property-read \App\Models\Task $task
     * @property-read \App\Models\Project $projects
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereOwnerId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereOwnerType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereItemName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereTaskId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereItemProjectId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereHours($value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereTaskAmount($value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereFixRate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereDescription($value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem query()
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem clone()
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|InvoiceItem|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|InvoiceItem|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<InvoiceItem>|InvoiceItem tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class InvoiceItem extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Project
     *
     * @property-read mixed $attachments
     * @property-read \App\Models\Client $client
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $users
     * @property-read int|null $users_count
     * @property-read \App\Models\User $createdUser
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Task> $tasks
     * @property-read int|null $tasks_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Expense> $expenses
     * @property-read int|null $expenses_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\MediaLibrary\MediaCollections\Models\Media> $media
     * @property-read int|null $media_count
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereClientId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereDescription($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project wherePrice($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereCurrency($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereColor($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereCreatedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereDeletedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereDeletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereBudgetType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project query()
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|Project|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|Project|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Project extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\ProjectActivity
     *
     * @property mixed $batch_uuid
     * @property mixed $event
     * @property-read \App\Models\User $createdBy
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereLogName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereDescription($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereSubjectType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereEvent($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereSubjectId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereCauserType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereCauserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereProperties($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereBatchUuid($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity inLog()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity causedBy()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity forSubject()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity forEvent()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity hasBatch()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity forBatch()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity query()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity clone()
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|ProjectActivity|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|ProjectActivity|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<ProjectActivity>|ProjectActivity tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class ProjectActivity extends \Spatie\Activitylog\Models\Activity
    {
        //
    }

    /**
     * App\Models\Report
     *
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Project> $projects
     * @property-read int|null $projects_count
     * @property-read \App\Models\User $user
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Invoice> $reportInvoice
     * @property-read int|null $reportInvoice_count
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereOwnerId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereStartDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereEndDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereReportType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereReportData($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereInvoiceGenerate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereMeta($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereDeletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report query()
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|Report|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|Report|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Report>|Report tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Report extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\ReportFilter
     *
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereReportId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereParamType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereParamId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter ofParamType()
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter ofReport()
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter query()
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter clone()
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|ReportFilter|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|ReportFilter|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<ReportFilter>|ReportFilter tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class ReportFilter extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Setting
     *
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\MediaLibrary\MediaCollections\Models\Media> $media
     * @property-read int|null $media_count
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereKey($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereValue($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereGroup($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting query()
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|Setting|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|Setting|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Setting>|Setting tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Setting extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Status
     *
     * @property double|null $order
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereOrder($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status query()
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|Status|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|Status|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Status>|Status tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Status extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Tag
     *
     * @property-read \App\Models\User $createdUser
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Task> $taskTags
     * @property-read int|null $taskTags_count
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereCreatedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereDeletedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereDeletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag query()
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|Tag|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|Tag|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Tag>|Tag tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Tag extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Task
     *
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Tag> $tags
     * @property-read int|null $tags_count
     * @property-read \App\Models\Project $project
     * @property-read \App\Models\Client $client
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\TimeEntry> $timeEntries
     * @property-read int|null $timeEntries_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $taskAssignee
     * @property-read int|null $taskAssignee_count
     * @property-read \App\Models\User $createdUser
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\TaskAttachment> $attachments
     * @property-read int|null $attachments_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Comment> $comments
     * @property-read int|null $comments_count
     * @property-read \App\Models\TaskRating $rating
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ClientRating> $clientRatings
     * @property-read int|null $clientRatings_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\MediaLibrary\MediaCollections\Models\Media> $media
     * @property-read int|null $media_count
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task wherePriority($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereTitle($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereProjectId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereCompletedOn($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereTaskNumber($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereCreatedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereDeletedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereDeletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereEstimateTime($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereEstimateTimeType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task ofProject()
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task query()
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|Task|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|Task|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Task extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\TaskAttachment
     *
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereTaskId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereFile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment query()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment clone()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|TaskAttachment|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|TaskAttachment|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskAttachment>|TaskAttachment tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class TaskAttachment extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\TaskRating
     *
     * @property-read mixed $average_rating
     * @property-read mixed $is_edited
     * @property-read \App\Models\Task $task
     * @property-read \App\Models\User $ratedBy
     * @property-read \App\Models\User $editedBy
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereTaskId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereRatedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereCodeQuality($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereDeliveryOutput($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereTimeScore($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereCollaboration($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereComplexityUrgency($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereComments($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereEditedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereEditedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating query()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating clone()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|TaskRating|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|TaskRating|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskRating>|TaskRating tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class TaskRating extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\TaskTag
     *
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereTaskId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereTagId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag query()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag clone()
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|TaskTag|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|TaskTag|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<TaskTag>|TaskTag tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class TaskTag extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Tax
     *
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereTax($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax query()
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|Tax|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|Tax|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Tax extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\TimeEntry
     *
     * @property-read \App\Models\Task $task
     * @property-read \App\Models\ActivityType $activityType
     * @property-read \App\Models\User $user
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereTaskId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereActivityTypeId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereStartTime($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereEndTime($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereDuration($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereEntryType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereNote($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereDeletedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereDeletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry ofUser()
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry ofCurrentUser()
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry query()
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry clone()
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|TimeEntry|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|TimeEntry|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<TimeEntry>|TimeEntry tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class TimeEntry extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\User
     *
     * @property-read \App\Models\User $createdUser
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Task> $taskAssignee
     * @property-read int|null $taskAssignee_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Task> $userActiveTask
     * @property-read int|null $userActiveTask_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Report> $reports
     * @property-read int|null $reports_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Task> $assignedTasks
     * @property-read int|null $assignedTasks_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\TimeEntry> $timeEntries
     * @property-read int|null $timeEntries_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Project> $projects
     * @property-read int|null $projects_count
     * @property-read \App\Models\Client $client
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ProjectActivity> $activityLogs
     * @property-read int|null $activityLogs_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Comment> $comments
     * @property-read int|null $comments_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Invoice> $invoices
     * @property-read int|null $invoices_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Task> $tasks
     * @property-read int|null $tasks_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Project> $usersProjects
     * @property-read int|null $usersProjects_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Expense> $expenses
     * @property-read int|null $expenses_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ActivityType> $activityType
     * @property-read int|null $activityType_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Tag> $tags
     * @property-read int|null $tags_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
     * @property-read int|null $notifications_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Role> $roles
     * @property-read int|null $roles_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Permission> $permissions
     * @property-read int|null $permissions_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\MediaLibrary\MediaCollections\Models\Media> $media
     * @property-read int|null $media_count
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmailVerifiedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePassword($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereSetPassword($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIsEmailVerified($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIsActive($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereActivationCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereSalary($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCreatedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDeletedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRememberToken($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereLanguage($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDeletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereOwnerId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereOwnerType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User active()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User role()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User permission()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User query()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User clone()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|User|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|User|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class User extends \Illuminate\Foundation\Auth\User
    {
        //
    }

    /**
     * App\Models\UserDaysOff
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property \Illuminate\Support\Carbon|null $approved_at
     * @property int|null $approved_by
     * @property mixed $notes
     * @property mixed $status
     * @property array $selected_days
     * @property \Illuminate\Support\Carbon $week_start_date
     * @property int $user_id
     * @property int $id
     * @property-read mixed $selected_days_names
     * @property-read \App\Models\User $user
     * @property-read \App\Models\User $approver
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereWeekStartDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereSelectedDays($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereNotes($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereApprovedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereApprovedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff forCurrentWeek()
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff query()
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff clone()
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|UserDaysOff|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|UserDaysOff|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<UserDaysOff>|UserDaysOff tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class UserDaysOff extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\UserNotification
     *
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereTitle($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereDescription($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereReadAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereUserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification query()
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification clone()
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|UserNotification|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|UserNotification|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<UserNotification>|UserNotification tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class UserNotification extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

}

namespace Spatie\Activitylog\Models {

    /**
     * Spatie\Activitylog\Models\Activity
     *
     * @property-read \Spatie\Activitylog\Models\Activity $subject
     * @property-read \Spatie\Activitylog\Models\Activity $causer
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereLogName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereDescription($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereSubjectType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereEvent($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereSubjectId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereCauserType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereCauserId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereProperties($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereBatchUuid($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity inLog()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity causedBy()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity forSubject()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity forEvent()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity hasBatch()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity forBatch()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity query()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity selectRaw(string $expression, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity join(string $table, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity joinWhere(string $table, \Closure|string $first, string $operator, string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity leftJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity leftJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity rightJoin(string $table, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity rightJoinWhere(string $table, \Closure|string $first, string $operator, string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as, \Closure|string $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity crossJoin(string $table, \Closure|string|null $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity where(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhere(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNot(\Closure|string|array $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNot(\Closure|string|array $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereColumn(string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereColumn(string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereIn(string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNotIn(string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNotIn(string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNull(string|array $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereBetween(string|\Illuminate\Database\Query\Expression $column, iterable $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereBetweenColumns(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNotBetween(string $column, iterable $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNotBetweenColumns(string $column, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNotBetween(string $column, iterable $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNotBetweenColumns(string $column, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereDate(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereTime(string $column, string $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity addDateBasedWhere(string $type, string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereSub(string $column, string $operator, \Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereExists(\Closure $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereExists(\Closure $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNotExists(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNotExists(\Closure $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity groupBy(array|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity groupByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity having(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orHaving(\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity havingNested(\Closure $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity havingNull(string|array $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity havingNotNull(string|array $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity havingBetween(string $column, array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity havingRaw(string $sql, array $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orHavingRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity beforeQuery(callable $callback)
     * @method static void applyBeforeQueryCallbacks()
     * @method static string toSql()
     * @method static mixed find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, \Closure|array|string $columns, \Closure|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue(string $expression, array $bindings)
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity cloneForPaginationCount()
     * @method static array withoutSelectAliases(array $columns)
     * @method static \Illuminate\Support\LazyCollection cursor()
     * @method static void enforceOrderBy()
     * @method static \Illuminate\Support\Collection pluck(string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr(\Closure $callback)
     * @method static mixed doesntExistOr(\Closure $callback)
     * @method static int count(string $columns)
     * @method static mixed min(string $column)
     * @method static mixed max(string $column)
     * @method static mixed sum(string $column)
     * @method static mixed avg(string $column)
     * @method static mixed average(string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert(array $values)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertGetId(array $values, string|null $sequence)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder|string $query)
     * @method static int update(array $values)
     * @method static int updateFrom(array $values)
     * @method static bool updateOrInsert(array $attributes, array $values)
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount, array $extra)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount, array $extra)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static \Illuminate\Database\Query\Expression raw(mixed $value)
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity setBindings(array $bindings, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity mergeBindings(\Illuminate\Database\Query\Builder $query)
     * @method static array cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity cloneWithout(array $properties)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity cloneWithoutBindings(array $except)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity dump()
     * @method static void dd()
     * @method static bool chunk(int $count, callable $callback)
     * @method static \Illuminate\Support\Collection chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
     * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static \Illuminate\Database\Eloquent\Model|Activity|static|null first(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Model|Activity|static|null sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity tap(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Activity extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

}